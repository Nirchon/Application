using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class DStarAlgorithm2 : MonoBehaviour
{
    [SerializeField] private List<Transform> openList;
    [SerializeField] private List<Transform> closedList;
    [SerializeField] private List<Transform> path;
    [SerializeField] private List<char> directions;
    [SerializeField] private List<Transform> intersections;
    [SerializeField] private List<dStarSave> interSave;
    [SerializeField] private Transform interParent;
    [SerializeField] private Transform startWorldPosition;
    [SerializeField] private Transform endWorldPosition;
    [SerializeField] private Transform endStreet;
    [SerializeField] private Vector3 endWorldStreetPosition;
    private Transform lastStartWorldPos;

    //Initializes everything for the algorithm
    public void InitializeAlgorithm()
    {
        openList = new List<Transform>();
        closedList = new List<Transform>();
        path = new List<Transform>();
        directions = new List<char>();
        interSave = new List<dStarSave>();

        GetPositions();
    }

    //Gets the positions from where the vehicle starts and where it wants to go (random)
    public void GetPositions()
    {
        int street = Random.Range(0, GameManager.instance.streets.Count);
        int streetLane = Random.Range(0, 2);
        Transform streetLaneT = GameManager.instance.streets[street].GetChild(streetLane);

        endWorldPosition = streetLaneT.GetComponent<StreetLaneManagement>().intersectionAtExit;
        endStreet = GameManager.instance.streets[street];

        float goalLength = (streetLaneT.lossyScale.x / 2) - 8;
        goalLength = Random.Range(0, goalLength);

        //Decides in which direction from the center of the street lane the goal will be
        if(Random.Range(1, 3) == 1)
        {
            endWorldStreetPosition = streetLaneT.GetComponent<Renderer>().bounds.center + (streetLaneT.right * goalLength);
            endWorldStreetPosition.y = transform.lossyScale.y / 2;
        }
        else
        {
            endWorldStreetPosition = streetLaneT.GetComponent<Renderer>().bounds.center - (streetLaneT.right * goalLength);
            endWorldStreetPosition.y = transform.lossyScale.y / 2;
        }

        startWorldPosition = GetComponent<VehicleManager>().nextIntersection;

        CreateSaves();
    }

    //Creates the saves for each vehicle to store their individual information about each intersection
    public void CreateSaves()
    {
        for (int i = 0; i < GameManager.instance.intersections.Count; i++)
        {
            dStarSave intersectionSave = ScriptableObject.CreateInstance("dStarSave") as dStarSave;
            dStarSave interSave2 = GameManager.instance.intersections[i].GetComponent<dStarInter>().save;
            interSave2.rank = i;
            intersectionSave.gCost = interSave2.gCost;
            intersectionSave.hCost = interSave2.hCost;
            intersectionSave.fCost = interSave2.fCost;

            List<Transform> neighborSaves = new List<Transform>();
            for (int a = 0; a < 4; a++)
            {
                Transform neighbor = interSave2.neighbors[a];
                neighborSaves.Add(neighbor);
            }

            intersectionSave.intersection = interSave2.intersection;
            intersectionSave.neighbors = neighborSaves;
            intersectionSave.rank = i;
            intersectionSave.name = GameManager.instance.intersections[i].name;
            interSave.Add(intersectionSave);
        }

        for (int a = 0; a < interSave.Count; a++)
        {
            dStarInter intersection = interSave[a].intersection.GetComponent<dStarInter>();
            for (int b = 0; b < 4; b++)
            {
                interSave[a].connectingStreets.Add(null);
                interSave[a].tempNeighbor.Add(null);
            }
            interSave[a].connectingStreets[0] = intersection.ZurÃ¼ck;
            interSave[a].connectingStreets[1] = intersection.Links;
            interSave[a].connectingStreets[2] = intersection.Grade;
            interSave[a].connectingStreets[3] = intersection.Rechts;
        }

        FindEndPos();
    }

    //The Algorithm searching for the endWorldPosition from the startWorldPosition, generating each intersections costs on the way
    public void FindEndPos()
    {
        Transform currentPos = startWorldPosition;
        openList.Add(currentPos);
        int currentPosRank = GetIntersectionRank(currentPos);

        //Running through the intersections until the endWorldPosition is found
        while(openList.Count > 0)
        {
            currentPosRank = GetIntersectionRank(currentPos);

            if(currentPos == endWorldPosition)
            {
                FindPath();
                return;
            }

            //Calculating all costs of the searched intersections neighbors if they are not in the closed list (already have been searched)
            for (int i = 0; i < interSave[currentPosRank].neighbors.Count; i++)
            {
                if(interSave[currentPosRank].neighbors[i] != null)
                {
                    if (!closedList.Contains(interSave[currentPosRank].neighbors[i])) 
                    {
                        int neighborRank = GetIntersectionRank(interSave[currentPosRank].neighbors[i]);

                        //Calculating gCost of the neighbor
                        int gCost = interSave[currentPosRank].gCost + CalculateDistance(interSave[neighborRank].intersection, interSave[currentPosRank].intersection);

                        //If the neighbor already has a gCost, but the newly calculated gCost is lower or the gCost is equal to 0
                        if(gCost < interSave[neighborRank].gCost || interSave[neighborRank].gCost == 0)
                        {
                            interSave[neighborRank].gCost = gCost;
                        }

                        //Calculating hCost of the neighbor
                        int xDistance = CalculateXDistance(interSave[neighborRank].intersection, endWorldPosition);
                        int yDistance = CalculateYDistance(interSave[neighborRank].intersection, endWorldPosition);
                        interSave[neighborRank].hCost = xDistance + yDistance;

                        //Calculating fCost of the neighbor
                        interSave[neighborRank].fCost = interSave[neighborRank].gCost + interSave[neighborRank].hCost + interSave[neighborRank].busyness;

                        if (!openList.Contains(interSave[neighborRank].intersection))
                        {
                            openList.Add(interSave[neighborRank].intersection);
                        }
                    }
                }
            }

            //Removing the searched intersection from the open list and adding it to the closed list to prevent it from being searched again
            if (!closedList.Contains(interSave[currentPosRank].intersection))
            {
                openList.Remove(currentPos);
                closedList.Add(currentPos);
            }

            int tempCost = int.MaxValue;

            //Looking for the intersection with the lowest fCost in the open list if there are multiply entries
            for (int i = 0; i < openList.Count; i++)
            {
                int listRank = GetIntersectionRank(openList[i]);

                if (interSave[listRank].fCost < tempCost)
                {
                    tempCost = interSave[listRank].fCost;
                    currentPos = interSave[listRank].intersection;
                }
            }
        }
    }

    //Calculate the distance between two transforms disregarding the y axis
    public int CalculateDistance(Transform pos1, Transform pos2)
    {
        Vector3 posA = new Vector3(pos1.position.x, 0, pos1.position.z);
        Vector3 posB = new Vector3(pos2.position.x, 0, pos2.position.z);
        int distance = Mathf.RoundToInt(Vector3.Distance(posA, posB));
        return distance;
    }

    //Calculate the x distance between two transforms
    public int CalculateXDistance(Transform pos1, Transform pos2)
    {
        int distance = Mathf.Abs(Mathf.RoundToInt(pos2.position.x - pos1.position.x));
        return distance;
    }

    //Calculate the y distance between two transforms
    public int CalculateYDistance(Transform pos1, Transform pos2)
    {
        int distance = Mathf.Abs(Mathf.RoundToInt(pos2.position.z - pos1.position.z));
        return distance;
    }

    //Finding the actual path from the endWorldPosition to the startWorldPosition once the costs have been calculated and reversing it at the end
    public void FindPath()
    {
        Transform currentPos = endWorldPosition;
        bool pathGenerated = false;

        path.Add(endWorldPosition);

        //Running through the neighboring intersections with the lowest fCost until the startWorldPosition is found
        while(pathGenerated == false)
        {
            int currentPosRank = GetIntersectionRank(currentPos);
            int lowestFCost = int.MaxValue;
            int bestNeighborRank = 0;

            for (int i = 0; i < interSave[currentPosRank].neighbors.Count; i++)
            {
                //If the currently searched intersection is the start position
                if (interSave[currentPosRank].neighbors[i] == startWorldPosition)
                {
                    pathGenerated = true;
                    path.Add(startWorldPosition);
                    path.Reverse();
                    ConvertPath();
                    return;
                }

                else if(interSave[currentPosRank].neighbors[i] != null && !path.Contains(interSave[currentPosRank].neighbors[i]))
                {
                    int neighborRank = interSave[currentPosRank].neighbors[i].GetComponent<dStarInter>().save.rank;

                    if (interSave[neighborRank].fCost < lowestFCost && interSave[neighborRank].fCost != 0)
                    {
                        lowestFCost = interSave[neighborRank].fCost;
                        bestNeighborRank = neighborRank;
                    }
                }
            }

            currentPos = interSave[bestNeighborRank].intersection;
            path.Add(currentPos);
        }
    }

    //Converting the generated path into another list to be easier of use for other scripts
    public void ConvertPath()
    {
        int connectingStreetNum1 = 0;
        int connectingStreetNum2 = 0;

        //Adding directions up until the penultimate intersection
        for (int i = 0; i < path.Count - 1; i++)
        {
            connectingStreetNum1 = GetConnectingStreet(interSave[path[i].GetComponent<dStarInter>().save.rank], interSave[path[i + 1].GetComponent<dStarInter>().save.rank]);
            char direction = 'n';

            if(i == 0)
            {
                int pathRank = GetIntersectionRank(path[i]);

                for (int j = 0; j < interSave[pathRank].connectingStreets.Count; j++)
                {
                    if (interSave[pathRank].connectingStreets[j] == GetComponent<VehicleManager>().currentStreet.parent)
                    {
                        connectingStreetNum2 = j;
                    }
                }
            }
            else
            {
                connectingStreetNum2 = GetConnectingStreet(interSave[path[i].GetComponent<dStarInter>().save.rank], interSave[path[i - 1].GetComponent<dStarInter>().save.rank]);
            }

            direction = GetDirectionFromNumber(connectingStreetNum1, connectingStreetNum2);
            directions.Add(direction);
        }

        //Adding direction at the last intersection
        connectingStreetNum1 = GetConnectingStreet(interSave[path[path.Count - 1].GetComponent<dStarInter>().save.rank], interSave[path[path.Count - 2].GetComponent<dStarInter>().save.rank]);
        connectingStreetNum2 = GetConnectingStreet(interSave[path[path.Count - 1].GetComponent<dStarInter>().save.rank], endStreet);
        directions.Add(GetDirectionFromNumber(connectingStreetNum1, connectingStreetNum2));

        GetComponent<MoveVehicle>().ConvertPathToBools(directions);
    }

    //Returns the value of connected street saved in save1's streetList
    public int GetConnectingStreet(dStarSave save1, dStarSave save2)
    {
        for (int a = 0; a < save1.connectingStreets.Count; a++)
        {
            if(save1.connectingStreets[a] == null)
            {
                continue;
            }
            for (int b = 0; b < save2.connectingStreets.Count; b++)
            {
                if (save2.connectingStreets[b] == null)
                {
                    continue;
                }
                if (save1.connectingStreets[a] == save2.connectingStreets[b])
                {
                    return a;
                }
            }
        }

        return 0;
    }

    //Searches the correct value from save1's streetList by searching it with a street
    public int GetConnectingStreet(dStarSave save1, Transform street)
    {
        for (int a = 0; a < save1.connectingStreets.Count; a++)
        {
            if (save1.connectingStreets[a] == null)
            {
                continue;
            }
            if (save1.connectingStreets[a] == street)
            {
                return a;
            }
        }

        return 0;
    }

    //Returns a char indicating where the car has to drive next by comparing two street numbers
    public char GetDirectionFromNumber(int number1, int number2)
    {
        int tempNumber = 0;

        //Check if right
        tempNumber = number2 - 1;
        if (tempNumber >= 0)
        {
            if(tempNumber == number1)
            {
                return 'r';
            }
        }
        else
        {
            tempNumber = 3;
            if(tempNumber == number1)
            {
                return 'r';
            }
        }

        //Check if left
        tempNumber = number2 + 1;
        if (tempNumber <= 3 && tempNumber == number1)
        {
            return 'l';
        }

        //Check if straight
        tempNumber = number2 + 2;
        if(tempNumber <= 3 && tempNumber == number1)
        {
            return 's';
        }

        //Check for numbers bigger than 3
        for (int i = 1; i < 3; i++)
        {
            if (number2 + i >= 4)
            {
                tempNumber = (number2 + i) - 4;

                //Left
                if(tempNumber == number1 && i == 1)
                {
                    return 'l';
                }
                //Straight
                if (tempNumber == number1 && i == 2)
                {
                    return 's';
                }
            }
        }

        return 'n';
    }

    //Checks if all neighbors of a intersection has been searched
    public bool CheckIfNeighborsSearched(dStarSave intersection)
    {
        for (int i = 0; i < intersection.neighbors.Count; i++)
        {
            if(intersection.neighbors[i] != null)
            {
                if (openList.Contains(intersection.neighbors[i]))
                {
                    return false;
                }
            }
        }

        return true;
    }

    //Returns the position of a intersection in the interSave
    public int GetIntersectionRank(Transform intersection)
    {
        dStarInter searchedDStar = intersection.GetComponent<dStarInter>();
        return searchedDStar.save.rank;
    }
}
